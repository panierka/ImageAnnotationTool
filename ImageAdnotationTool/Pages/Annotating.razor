@page "/annotate/{Id:int}"
@using AnnotationEditor;
@using Blazor.Extensions.Canvas;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions;
@using System.Numerics;
@using CanvasDisplayEngine;
@using ImageAnnotationToolDataAccessLibrary.Models.ImageAnnotation;
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement
@using ShapeEditing;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using ShapeEditing.Tools;
@inject IColorProvider colorProvider;
@inject ITeamServiceProvider teamServiceProvider;
@inject IProjectServiceProvider projectServiceProvider;
@inject NavigationManager NavigationManager;
@inject IAnnotationServiceProvider annotationServiceProvider;
@inject IUserAccountsServiceProvider userServiceProvider;
@inject ProtectedSessionStorage sessionStorage;


<div class="annotate-main">
    <h3 class="muted-headers">ADNOTACJA</h3>
    <div class="annotate-options">
    @if (isAuthorized)
    {
        <button class="btn btn-primary" >Wrzuć zdjęcia</button>
    }
    else
    {
        <button class="btn btn-primary">Poprzednie</button>
        <button class="btn btn-primary">Następne</button>
    }
    </div>
    <div @onmousedown=@RegisterMouseDownAsync
     @onmouseup=@RegisterMouseUpAsync
     @onmousemove=@RegisterMouseUpdateAsync
     style="background-image: url('@DOG'); 
     background-repeat: no-repeat">
    <BECanvas Width="460" Height="292" @ref="@canvas"></BECanvas>
</div>

<div class="annotate-options">
@if (currentMode == ShapeEditionType.Rectangle)
{
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("create"))">Twórz</button>
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("reshape"))">Formuj</button>
}
else if (currentMode == ShapeEditionType.Polygon)
{
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("create"))">Twórz</button>
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("reshape"))">Formuj</button>
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("split"))">Dziel</button>
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("remove"))">Usuwaj</button>
}

<button class="btn btn-primary" @onclick="@(_ =>SwitchTool("move"))">Rusz</button>


<button class="btn btn-primary" @onclick="@Undo">Cofnij</button>
<button class="btn btn-primary" @onclick="@ResetShape">Resetuj</button>

<ComboBox Items="modes"
          SelectedItem="currentMode"
          OnSelectedItemChanged="@(async x => await SwitchToolset(x))"
          T="ShapeEditionType"
          CustomStringConverter="@(
        new ComboBox<ShapeEditionType>
            .DelegatedCustomStringConverter(x =>
        {
            return x switch
            {
                ShapeEditionType.Rectangle => "Prostokąt",
                ShapeEditionType.Polygon => "Wielokąt",
                _ => throw new NotImplementedException()
            };
        }
    ))" />
    </div>
    </div>
    <div class="annotate-listbox">
    <AnnotationsListBox Classes="@(new()
{ 
    new() { Name = "Pies", DescriptorBlueprints = new List<DescriptorBlueprint>() 
        {
            new() { Name = "Rasa", Type = DescriptorBlueprint.DataType.String },
            new() { Name = "Kolor", Type = DescriptorBlueprint.DataType.String },
        } },
    new() { Name = "Broń", DescriptorBlueprints = new List<DescriptorBlueprint>() 
        {
            new() { Name = "Rodzaj", Type = DescriptorBlueprint.DataType.String }
        } } 
})" OnAddAnnotation="@(async x => await AddAnnotationContext(x))"
    OnSelectAnnotation="@(async x => await SelectAnnotationContext(x))"/>

    </div>
@code {
    private const string DOG = PlaceholderData.ExampleBase64s.DOG;
    private Canvas2DContext? context;
    private BECanvasComponent? canvas;
    private CanvasDisplayEngine? drawingEngine;
    private AnnotationContext? currentAnnotationContext;

    private List<AnnotationContext> annotationContexts = new();
    private SelectionIndicator selectionIndicator = new();

    private ShapeEditionType currentMode;
    private ShapeEditionType[] modes = new ShapeEditionType[] {
        ShapeEditionType.Rectangle,
        ShapeEditionType.Polygon,
    };

     private bool isAuthorized = false;
     [Parameter]
     public int Id { get; set; }

    private class Test
    {
        public string? Abc { get; set; }

        public override string ToString()
        {
            return Abc ?? string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var userIdRequest = await sessionStorage.GetAsync<int>("userID");

        if (!userIdRequest.Success)
        {
            isAuthorized = false;
            StateHasChanged();
            return;
        }

        var userId = userIdRequest.Value;
        //Tutaj wywala null reference 


        var tmp = await projectServiceProvider.GetProjectById(Id);
        var teamId = tmp.Team.Id;
        var teamMemberId = (await teamServiceProvider.GetTeamMember(userId, teamId)).Id;
        var projectMemberSeat = await projectServiceProvider.GetProjectMemberLoaded(
            teamMemberSeatId: teamMemberId,
            projectId: Id
        );

        if (projectMemberSeat is { Role: ProjectMemberSeat.ProjectRole.Admin })
        {
           
            isAuthorized = true;
        }

        StateHasChanged();

        context = await canvas.CreateCanvas2DAsync();
        drawingEngine = new(context, canvas!);

        drawingEngine.Drawables.Add(selectionIndicator);
        await drawingEngine.RenderFrame();
    }

    private async Task RegisterMouseDownAsync(MouseEventArgs e)
    {        
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        currentAnnotationContext?.ShapeEditor?.PressTool(data);
        await drawingEngine!.RenderFrame();
    }

    private async Task RegisterMouseUpdateAsync(MouseEventArgs e)
    {
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        currentAnnotationContext?.ShapeEditor?.MoveTool(data);
        await drawingEngine!.RenderFrame();
    }

    private async Task RegisterMouseUpAsync(MouseEventArgs e)
    {
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        currentAnnotationContext?.ShapeEditor?.ReleaseTool(data);
        await drawingEngine!.RenderFrame();
    }

    private async Task Undo()
    {
        currentAnnotationContext?.ShapeEditor?.Undo();
        await drawingEngine!.RenderFrame();
    }

    private async Task ResetShape()
    {
        currentAnnotationContext?.ShapeEditor?.ResetShape();
        await drawingEngine!.RenderFrame();
    }

    private async Task SwitchToolset(ShapeEditionType type)
    {
        await ResetShape();
        currentAnnotationContext?.ShapeEditor?.ClearHistory();
        currentMode = type;

        if (currentAnnotationContext is { })
        {
            currentAnnotationContext.Mode = type;
        }

        currentAnnotationContext?.ToolsetHandler.EquipToolset(type);
        StateHasChanged();
    }

    private void SwitchTool(string name)
    {
        currentAnnotationContext?.ToolsetHandler.EquipToolFromCurrentToolset(name);
        StateHasChanged();
    }

    private async Task AddAnnotationContext(Annotation annotation)
    {
        var newContext = new AnnotationContext(annotation, colorProvider);
        annotationContexts.Add(newContext);
        drawingEngine!.Drawables.Add(newContext.Shape);
        currentAnnotationContext = newContext;
        selectionIndicator.Shape = currentAnnotationContext.Shape;

        currentMode = ShapeEditionType.Rectangle;
        newContext.Mode = ShapeEditionType.Rectangle;

        StateHasChanged();
        await drawingEngine.RenderFrame();
    }
    
    private async Task SelectAnnotationContext(Annotation annotation)
    {
        currentAnnotationContext = annotationContexts
            .First(x => x.Annotation == annotation);
        selectionIndicator.Shape = currentAnnotationContext.Shape;

        currentMode = currentAnnotationContext.Mode;

        StateHasChanged();
        await drawingEngine!.RenderFrame();
    }
}
