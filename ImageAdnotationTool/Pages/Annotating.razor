@page "/annotate"
@using AnnotationEditor;
@using Blazor.Extensions.Canvas;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions;
@using System.Numerics;
@using CanvasDisplayEngine;
@using ImageAnnotationToolDataAccessLibrary.Models.ImageAnnotation;
@using ShapeEditing;
@using ShapeEditing.Tools;
@inject IColorProvider colorProvider;

<h3>Annotating</h3>

@*
<AnnotationsListBox Classes="@(new()
{ 
    new() { Name = "Pies", DescriptorBlueprints = new List<DescriptorBlueprint>() 
        {
            new() { Name = "Rasa", Type = DescriptorBlueprint.DataType.String },
            new() { Name = "Kolor", Type = DescriptorBlueprint.DataType.String },
        } },
    new() { Name = "Broń", DescriptorBlueprints = new List<DescriptorBlueprint>() 
        {
            new() { Name = "Rodzaj", Type = DescriptorBlueprint.DataType.String }
        } } 
})"/>
*@
<div @onmousedown=@RegisterMouseDownAsync
     @onmouseup=@RegisterMouseUpAsync
     @onmousemove=@RegisterMouseUpdateAsync
     style="background-image: url('@DOG'); 
     background-repeat: no-repeat">
    <BECanvas Width="460" Height="292" @ref="@canvas"></BECanvas>
</div>

@if (currentMode == ShapeEditionType.Rectangle)
{
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("create"))">Twórz</button>
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("reshape"))">Formuj</button>
}
else if (currentMode == ShapeEditionType.Polygon)
{
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("create"))">Twórz</button>
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("reshape"))">Formuj</button>
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("split"))">Dziel</button>
    <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("remove"))">Usuwaj</button>
}

<button class="btn btn-primary" @onclick="@(_ =>SwitchTool("move"))">Rusz</button>

<br />
<button class="btn btn-primary" @onclick="@Undo">Cofnij</button>
<button class="btn btn-primary" @onclick="@ResetShape">Resetuj</button>

<ComboBox Items="modes"
          SelectedItem="currentMode"
          OnSelectedItemChanged="@(async x => await SwitchToolset(x))"
          T="ShapeEditionType"
          CustomStringConverter="@(
        new ComboBox<ShapeEditionType>
            .DelegatedCustomStringConverter(x =>
        {
            return x switch
            {
                ShapeEditionType.Rectangle => "Prostokąt",
                ShapeEditionType.Polygon => "Wielokąt",
                _ => throw new NotImplementedException()
            };
        }
    ))" />

@code {
    private const string DOG = PlaceholderData.ExampleBase64s.DOG;
    private Canvas2DContext? context;
    private BECanvasComponent? canvas;
    private CanvasDisplayEngine? drawingEngine;
    private AnnotationContext? annotationContext;

    private ShapeEditionType currentMode;
    private ShapeEditionType[] modes = new ShapeEditionType[] {
        ShapeEditionType.Rectangle,
        ShapeEditionType.Polygon,
    };


    private class Test
    {
        public string? Abc { get; set; }

        public override string ToString()
        {
            return Abc ?? string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        context = await canvas.CreateCanvas2DAsync();
        drawingEngine = new(context, canvas!);

        annotationContext = new(new(), colorProvider);

        drawingEngine.Drawables.Add(annotationContext.Shape);
        drawingEngine.Drawables.Add(new SelectionIndicator() { Shape = annotationContext.Shape });
        await drawingEngine.RenderFrame();
    }

    private async Task RegisterMouseDownAsync(MouseEventArgs e)
    {        
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        annotationContext?.ShapeEditor?.PressTool(data);
        await drawingEngine!.RenderFrame();
    }

    private async Task RegisterMouseUpdateAsync(MouseEventArgs e)
    {
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        annotationContext?.ShapeEditor?.MoveTool(data);
        await drawingEngine!.RenderFrame();
    }

    private async Task RegisterMouseUpAsync(MouseEventArgs e)
    {
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        annotationContext?.ShapeEditor?.ReleaseTool(data);
        await drawingEngine!.RenderFrame();
    }

    private async Task Undo()
    {
        annotationContext?.ShapeEditor?.Undo();
        await drawingEngine!.RenderFrame();
    }

    private async Task ResetShape()
    {
        annotationContext?.ShapeEditor?.ResetShape();
        await drawingEngine!.RenderFrame();
    }

    private async Task SwitchToolset(ShapeEditionType type)
    {
        await ResetShape();
        annotationContext?.ShapeEditor?.ClearHistory();
        currentMode = type;
        annotationContext?.ToolsetHandler.EquipToolset(type);
        StateHasChanged();
    }

    private void SwitchTool(string name)
    {
        annotationContext?.ToolsetHandler.EquipToolFromCurrentToolset(name);
        StateHasChanged();
    }
}
