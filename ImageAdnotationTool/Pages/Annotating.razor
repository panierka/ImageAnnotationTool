@page "/annotate"
@using Blazor.Extensions.Canvas;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions;
@using System.Numerics;
@using CanvasDisplayEngine;
@using ShapeEditor;
@using ShapeEditor.Tools;

<h3>Annotating</h3>

<ComboBox 
    Items="modes" 
    SelectedItem="currentMode" 
    OnSelectedItemChanged="SwitchToolset"
    T="ShapeEditionType" />

<div @onmousedown=@RegisterMouseDownAsync
     @onmouseup=@RegisterMouseUpAsync
     @onmousemove=@RegisterMouseUpdateAsync
     style="background-image: url('@DOG'); 
     background-repeat: no-repeat">
    <BECanvas Width="460" Height="292" @ref="@canvas"></BECanvas>
</div>

@if (currentMode == ShapeEditionType.Rectangle)
{
    <button class="btn btn-primary" @onclick="@(_ => shapeEditor?.EquipEditingTool(new RectangleCreationTool()))">Twórz</button>
    <button class="btn btn-primary" @onclick="@(_ => shapeEditor?.EquipEditingTool(new RectangularScalingTool()))">Formuj</button>
}
else if (currentMode == ShapeEditionType.Polygon)
{
    <button class="btn btn-primary" @onclick="@(_ => shapeEditor?.EquipEditingTool(new CreationTool()))">Twórz</button>
    <button class="btn btn-primary" @onclick="@(_ => shapeEditor?.EquipEditingTool(new ReshapingTool()))">Formuj</button>
    <button class="btn btn-primary" @onclick="@(_ => shapeEditor?.EquipEditingTool(new SplittingTool()))">Dziel</button>
    <button class="btn btn-primary" @onclick="@(_ => shapeEditor?.EquipEditingTool(new RemovalTool()))">Usuwaj</button>
}

<button class="btn btn-primary" @onclick="@(_ => shapeEditor?.EquipEditingTool(new MovementTool()))">Rusz</button>

<br />
<button class="btn btn-primary" @onclick="@Undo">Cofnij</button>
<button class="btn btn-primary" @onclick="@ResetShape">Resetuj</button>

@code {
    private const string DOG = PlaceholderData.ExampleBase64s.DOG;
    private Canvas2DContext? context;
    private BECanvasComponent? canvas;
    private CanvasDisplayEngine? drawingEngine;
    private ShapeEditor? shapeEditor;
    private ShapeToolsetHandler toolsetHandler = null!;

    private ShapeEditionType currentMode;
    private ShapeEditionType[] modes = new ShapeEditionType[] {
        ShapeEditionType.Rectangle,
        ShapeEditionType.Polygon,
    };


    private class Test
    {
        public string? Abc { get; set; }

        public override string ToString()
        {
            return Abc ?? string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        context = await canvas.CreateCanvas2DAsync();
        drawingEngine = new(context, canvas!);

        var polygon = new Shape(new(255, 0, 0));

        drawingEngine.Drawables.Add(polygon);
        drawingEngine.Drawables.Add(new SelectionIndicator() { Shape = polygon });
        await drawingEngine.RenderFrame();

        shapeEditor = new();
        shapeEditor.AssignShape(polygon);

        toolsetHandler = new(shapeEditor);

        var rectangleToolset = new ShapeToolset();
        rectangleToolset.AddTool("create", new RectangleCreationTool());
        rectangleToolset.AddTool("reshape", new RectangularScalingTool());
        rectangleToolset.AddTool("move", new MovementTool());
        toolsetHandler.AddToolset(ShapeEditionType.Rectangle, rectangleToolset);

        var polygonToolset = new ShapeToolset();
        polygonToolset.AddTool("create", new CreationTool());
        polygonToolset.AddTool("reshape", new ReshapingTool());
        polygonToolset.AddTool("split", new SplittingTool());
        polygonToolset.AddTool("remove", new RemovalTool());
        polygonToolset.AddTool("move", new MovementTool());
        toolsetHandler.AddToolset(ShapeEditionType.Polygon, polygonToolset);

        toolsetHandler.EquipToolFromCurrentToolset("create");
    }

    private async Task RegisterMouseDownAsync(MouseEventArgs e)
    {
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        shapeEditor?.PressTool(data);
        await drawingEngine!.RenderFrame();
    }

    private async Task RegisterMouseUpdateAsync(MouseEventArgs e)
    {
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        shapeEditor?.MoveTool(data);
        await drawingEngine!.RenderFrame();
    }

    private async Task RegisterMouseUpAsync(MouseEventArgs e)
    {
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        shapeEditor?.ReleaseTool(data);
        await drawingEngine!.RenderFrame();
    }

    private async Task Undo()
    {
        shapeEditor?.Undo();
        await drawingEngine!.RenderFrame();
    }

    private async Task ResetShape()
    {
        shapeEditor?.ResetShape();
        await drawingEngine!.RenderFrame();
    }

    private void SwitchToolset(ShapeEditionType type)
    {
        currentMode = type;
        toolsetHandler.EquipToolset(type);
        StateHasChanged();
    }

    private void SwitchTool(string name)
    {
        toolsetHandler.EquipToolFromCurrentToolset(name);
        StateHasChanged();
    }
}
