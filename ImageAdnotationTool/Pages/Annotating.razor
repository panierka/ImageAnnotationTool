@page "/annotate/{Id:int}/{ImageIndex:int}"
@using AnnotationEditor;
@using Blazor.Extensions.Canvas;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions;
@using System.Numerics;
@using CanvasDisplayEngine;
@using ImageAnnotationToolDataAccessLibrary.Models.ImageAnnotation;
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement
@using ShapeEditing;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using ShapeEditing.Tools;
@using CanvasDisplayEngine;
@inject IColorProvider colorProvider;
@inject ITeamServiceProvider teamServiceProvider;
@inject IProjectServiceProvider projectServiceProvider;
@inject NavigationManager NavigationManager;
@inject IAnnotationServiceProvider annotationServiceProvider;
@inject IUserAccountsServiceProvider userServiceProvider;
@inject ProtectedSessionStorage sessionStorage;
@inject IJobsServiceProvider jobServiceProvider;
@inject IAnnotatedImagesServiceProvider imagesServiceProvider;

<div class="annotate-main">

        <h3 class="muted-headers">ADNOTACJA</h3>
        <div class="annotate-options">
        @if (isAuthorized)
        {
            <button class="btn btn-primary">Wrzuć zdjęcia</button>
        }

            <button class="btn btn-primary"
                disabled="@(IsTooLow(ImageIndex - 1))"
                onclick="@(async () => await Navigate(ImageIndex - 1))">
                Poprzednie
            </button>
            <button class="btn btn-primary"
                disabled="@(!canGoNext)"
                onclick="@(async () => await Navigate(ImageIndex + 1))">
                Następne
            </button>
            <button class="btn btn-primary" @onclick="@Save">Zapisz</button>
            @*<button class="btn btn-primary" @onclick="@Save">Wyjdź</button>*@
        
        </div>

        <div @onmousedown=@RegisterMouseDownAsync
         @onmouseup=@RegisterMouseUpAsync
         @onmousemove=@RegisterMouseUpdateAsync
         style="background-image: url('@imageData.SourceBase64');
     background-repeat: no-repeat">
            <BECanvas 
                Width="@imageData.Width" 
                Height="@imageData.Height" 
                @ref="@canvas"></BECanvas>
        </div>

        <div class="annotate-options">
            @if (currentMode == ShapeEditionType.Rectangle)
            {
                <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("create"))">Twórz</button>
                <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("reshape"))">Formuj</button>
            }
            else if (currentMode == ShapeEditionType.Polygon)
            {
                <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("create"))">Twórz</button>
                <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("reshape"))">Formuj</button>
                <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("split"))">Dziel</button>
                <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("remove"))">Usuwaj</button>
            }

            <button class="btn btn-primary" @onclick="@(_ =>SwitchTool("move"))">Rusz</button>


            <button class="btn btn-primary" @onclick="@Undo">Cofnij</button>
            <button class="btn btn-primary" @onclick="@ResetShape">Resetuj</button>

            <ComboBox Items="modes"
                  InitialSelection="currentMode"
                  OnSelectedItemChanged="@(async x => await SwitchToolset(x))"
                  T="ShapeEditionType"
                  CustomStringConverter="@(
        new ComboBox<ShapeEditionType>
            .DelegatedCustomStringConverter(x =>
        {
            return x switch
            {
                ShapeEditionType.Rectangle => "Prostokąt",
                ShapeEditionType.Polygon => "Wielokąt",
                _ => throw new NotImplementedException()
            };
        }
    ))" />
        </div>
@if (isLoaded)
{
    <div class="annotate-listbox">
        <AnnotationsListBox 
            Classes="@annotationClasses" 
            List="@(annotationContexts.Select(x => x.Annotation).ToList())"
            OnAddAnnotation="@(async x => await AddAnnotationContext(x))"
            OnSelectAnnotation="@(async x => await SelectAnnotationContext(x))" />

    </div>
}
else
{
    <div>
        Wczytywanie...
    </div>
}
</div>


@code {
    private ImageData imageData = new()
    {
        Width = 1,
        Height = 1,
    };
    private string DOG = PlaceholderData.ExampleBase64s.DOG;
    private Canvas2DContext? context;
    private BECanvasComponent canvas;
    private DisplayEngine? drawingEngine;
    private AnnotationContext? currentAnnotationContext;

    private List<AnnotationClass> annotationClasses = new();
    private List<AnnotationContext> annotationContexts = new();
    private SelectionIndicator selectionIndicator = new();

    private ShapeEditionType currentMode;
    private ShapeEditionType[] modes = new ShapeEditionType[] {
        ShapeEditionType.Rectangle,
        ShapeEditionType.Polygon,
    };

    private bool isAuthorized = false;
    private bool isLoaded = false;
    private int imageId;

    private bool canGoNext = false;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int ImageIndex { get; set; }

    private class Test
    {
        public string? Abc { get; set; }

        public override string ToString()
        {
            return Abc ?? string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var userIdRequest = await sessionStorage.GetAsync<int>("userID");

        if (!userIdRequest.Success)
        {
            isAuthorized = false;
            StateHasChanged();
            return;
        }

        var userId = userIdRequest.Value;

        var job = await jobServiceProvider.GetJobById(Id);
        var teamMemberId = job.AssignedProjectMember.AssignedTeamMember.Id;
        var projectId = await jobServiceProvider.GetProjectIdOfJob(Id);
        var projectMemberSeat = await projectServiceProvider.GetProjectMemberLoaded(
            teamMemberSeatId: teamMemberId,
            projectId: projectId
        );

        if (projectMemberSeat is { Role: ProjectMemberSeat.ProjectRole.Admin })
        {

            isAuthorized = true;
        }

        annotationClasses = await LoadAnnotationClassesFromProject();
        var images = await imagesServiceProvider.GetAnnotatedImagesFromProject(Id, ImageIndex, 1);
        imageId = images[0].Id;
        imageData = await imagesServiceProvider.GetImageData(imageId);

        canGoNext = !(await IsTooHigh(ImageIndex + 1));

        context = await canvas.CreateCanvas2DAsync();
        drawingEngine = new(context, canvas!);

        drawingEngine.Drawables.Add(selectionIndicator);
        await drawingEngine.RenderFrame();

        var annotations = await annotationServiceProvider.GetAnnotations(imageId);

        foreach (var annotation in annotations)
        {
            await AddAnnotationContext(annotation);
        }

        isLoaded = true;
        StateHasChanged();
    }

    private async Task RegisterMouseDownAsync(MouseEventArgs e)
    {        
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        currentAnnotationContext?.ShapeEditor?.PressTool(data);

        if (drawingEngine is { })
        {
            await drawingEngine.RenderFrame();
        }
    }

    private async Task RegisterMouseUpdateAsync(MouseEventArgs e)
    {
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        currentAnnotationContext?.ShapeEditor?.MoveTool(data);

        if (drawingEngine is { })
        {
            await drawingEngine.RenderFrame();
        }    
    }

    private async Task RegisterMouseUpAsync(MouseEventArgs e)
    {
        var data = new InputEventData(e.OffsetX, e.OffsetY, e.Button);
        currentAnnotationContext?.ShapeEditor?.ReleaseTool(data);

        if (drawingEngine is { })
        {
            await drawingEngine.RenderFrame();
        }
        currentAnnotationContext?.UpdateModel();
    }

    private async Task Undo()
    {
        currentAnnotationContext?.ShapeEditor?.Undo();

        if (drawingEngine is { })
        {
            await drawingEngine.RenderFrame();
        }
    }

    private async Task ResetShape()
    {
        currentAnnotationContext?.ShapeEditor?.ResetShape();

        if (drawingEngine is { })
        {
            await drawingEngine.RenderFrame();
        }
    }

    private async Task SwitchToolset(ShapeEditionType type)
    {
        await ResetShape();
        currentAnnotationContext?.ShapeEditor?.ClearHistory();
        currentMode = type;

        if (currentAnnotationContext is { })
        {
            currentAnnotationContext.Annotation.ShapeType = (int)type;
        }

        if (currentAnnotationContext is { })
        {
            currentAnnotationContext.Mode = type;
        }

        currentAnnotationContext?.ToolsetHandler.EquipToolset(type);
        StateHasChanged();
    }

    private void SwitchTool(string name)
    {
        currentAnnotationContext?.ToolsetHandler.EquipToolFromCurrentToolset(name);
        StateHasChanged();
    }

    private async Task AddAnnotationContext(Annotation annotation)
    {
        var newContext = new AnnotationContext(annotation, colorProvider);
        annotationContexts.Add(newContext);
        drawingEngine!.Drawables.Add(newContext.Shape);


        annotation
            .PointsX
            .Zip(annotation.PointsY, (x, y)
                => new CanvasDisplayEngine.Point(x, y))
            .ToList()
            .ForEach(p => newContext.Shape.AddPoint(p));

        newContext.Shape.IsClosed = annotation.IsClosed;

        currentAnnotationContext = newContext;
        selectionIndicator.Shape = currentAnnotationContext.Shape;

        var shapeType = (ShapeEditionType)annotation.ShapeType;
        currentMode = shapeType;
        newContext.Mode = shapeType;

        StateHasChanged();
        await drawingEngine.RenderFrame();
    }

    private async Task SelectAnnotationContext(Annotation annotation)
    {
        currentAnnotationContext = annotationContexts
            .First(x => x.Annotation == annotation);
        selectionIndicator.Shape = currentAnnotationContext.Shape;

        currentMode = currentAnnotationContext.Mode;

        StateHasChanged();
        await drawingEngine!.RenderFrame();
    }

    private async Task Save()
    {
        await annotationServiceProvider.SetAnnotations(imageId, annotationContexts.Select(x => x.Annotation).ToList());
    }

    private async Task<List<AnnotationClass>> LoadAnnotationClassesFromProject()
    {
        var jobId = Id;
        var projectId = await jobServiceProvider.GetProjectIdOfJob(jobId);
        return await annotationServiceProvider.GetAnnotationClasses(projectId);
    }

    private async Task Navigate(int index)
    {
        if (IsTooLow(index) || await IsTooHigh(index))
        {
            return;
        }

        NavigationManager.NavigateTo($"/annotate/{Id}/{index}", forceLoad:true);
    }

    private bool IsTooLow(int index)
    {
        return index < 0;
    }

    private async Task<bool> IsTooHigh(int index)
    {
        var count = await imagesServiceProvider.GetAnnotatedImagesInProjectCount(Id);
        return index >= count;
    }
}
