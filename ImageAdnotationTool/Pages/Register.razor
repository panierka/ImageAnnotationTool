@page "/register"
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.EntityFrameworkCore;
@using ImageAnnotationToolDataAccessLibrary.ModelCreationRequests;
@using ImageAnnotationToolDataAccessLibrary.Exceptions;
@using Blazored.FluentValidation;
@using Validation;
@using Microsoft.AspNetCore.Components.Forms;
@inject IUserAccountsServiceProvider userAccountsService;
@inject SignUpFormDataValidation validator;

<PageTitle>Rejestracja</PageTitle>


<EditForm class="styleEditForm"
	Model="@signUpFormData"
		  OnValidSubmit="@AddNewAccount">
		  <h3>Rejestracja</h3>
	<DataAnnotationsValidator />
@*	<FluentValidationValidator Validator="validator"/>
*@	
<div class="form-group">
      <label for="Login" class="form-label mt-4">Login</label>
<InputText class="form-control"
		type="text" 
		placeholder="login_1" 
		@bind-Value="@signUpFormData.Login" />
		</div>
		<div class="form-group">
      <label for="Login" class="form-label mt-4">Email</label>
	<InputText class="form-control"
		type="email" 
		placeholder="example@mail.com" 
		@bind-Value="@signUpFormData.Email" />
		</div>
		<div class="form-group">
      <label for="Login" class="form-label mt-4">Hasło</label>
	<InputText class="form-control"
		type="password" 
		placeholder="********"
		@bind-Value="@signUpFormData.Password" 
		/>
	</div>
	<div class="form-group">
      <label for="Login" class="form-label mt-4">Potwierdź hasło</label>
	<InputText class="form-control" type="password"
			   placeholder="********"
			   @bind-Value="@signUpFormData.ConfirmPassword"
			   />
			   </div>
	<ValidationSummary />



	<button type="submit"
			class="btn btn-success form-"
			disabled="@(!context.Validate() || !context.IsModified())">
		Zarejestruj
	</button>
</EditForm>


@code {

	private SignUpFormData signUpFormData = new();

	private async Task AddNewAccount(EditContext context)
	{
		if (await userAccountsService.UserWithLoginExists(signUpFormData.Login))
		{		
			return;
		}

		var sentSignUpFormData = signUpFormData;
		signUpFormData = new();

		context.NotifyValidationStateChanged();

		try
		{
			await userAccountsService.RegisterAccount(sentSignUpFormData);
		}
		catch (LoginIsAlreadyTakenException) {}
	}
}