@page "/register"
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.EntityFrameworkCore;
@using ImageAnnotationToolDataAccessLibrary.ModelCreationRequests;
@using ImageAnnotationToolDataAccessLibrary.Exceptions;
@using Blazored.FluentValidation;
@using Validation;
@inject IUserAccountsServiceProvider userAccountsService;
@inject SignUpFormDataValidation validator;

<PageTitle>Rejestracja</PageTitle>
<h3>Rejestracja</h3>

<EditForm 
	Model="@signUpFormData"
		  OnValidSubmit="@AddNewAccount">
	<DataAnnotationsValidator />
	<FluentValidationValidator Validator="validator"/>
	<InputText 
		type="text" 
		placeholder="Login" 
		@bind-Value="@signUpFormData.Login" />
	<br />
	<InputText 
		type="email" 
		placeholder="Email" 
		@bind-Value="@signUpFormData.Email" />
	<br />
	<InputText 
		type="password" 
		placeholder="Hasło" 
		@bind-Value="@signUpFormData.Password" 
		/>
	<br />
	<InputText type="password"
			   placeholder="Potwierdź hasło"
			   @bind-Value="@signUpFormData.ConfirmPassword"
			   />
	<ValidationSummary />

	<br />		

	<button type="submit"
			class="btn btn-success form-"
			disabled="@(!context.Validate() || !context.IsModified())">
		Zarejestruj
	</button>
</EditForm>


@code {

	private SignUpFormData signUpFormData = new();

	private void AddNewAccount(EditContext context)
	{
		if (userAccountsService.UserWithLoginExists(signUpFormData.Login))
		{		
			return;
		}

		var sentSignUpFormData = signUpFormData;
		signUpFormData = new();

		context.NotifyValidationStateChanged();

		try
		{
			userAccountsService.RegisterAccount(sentSignUpFormData);
		}
		catch (LoginIsAlreadyTakenException) {}
	}
}
