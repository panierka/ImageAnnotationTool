@page "/usersettingsteams/{Id:int}"
@using ImageAnnotationTool.Pages.AppPages.Shared
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using System.ComponentModel.DataAnnotations;
@inject ProtectedSessionStorage sessionStorage;
@inject ITeamServiceProvider teamServiceProvider;
@inject NavigationManager NavigationManager;
@inject IUserAccountsServiceProvider userServiceProvider;
<div class="page-after-logon">
<_leftMenu/>

	@if (isAuthorized)
	{
        <PageTitle>
            @($"{@team.Name} - ustawienia")
        </PageTitle>


		<div class="main-container">                
			<EditForm 
                Model="@userAddForm"
                OnValidSubmit="@AddUser">
                Dodaj użytkownika do zespołu:
                <DataAnnotationsValidator/>
                <InputText 
                    class="form-control"
                    placeholder="Login użytkonwika"
                    @bind-Value="@userAddForm.NewName"></InputText>
                <button 
                    disabled="@(!context.Validate() || !context.IsModified())">
                    Dodaj
                </button>
			</EditForm>
            
			<br />
			<EditForm 
                Model="@userDeletionForm" 
                OnValidSubmit="@RemoveUser">
                Usuń użytkownika z zespołu:
                <InputText 
                    class="form-control"
                    placeholder="nazwa Twojego zespołu"
                    @bind-Value="@userDeletionForm.ConfirmUserName"></InputText>            
                <button >
                    Usuń
                </button>
			</EditForm>
		</div>
	}
	else
	{
        <PageTitle>
            Błąd
        </PageTitle>
		<div>
			Nie odnaleziono strony.
		</div>
	}
    

</div>
@code {
	[Parameter]
	public int Id { get; set; }
	private int userId;
	private bool isAuthorized = false;
	private Team team = null!;
	private UserDeletionForm userDeletionForm = new UserDeletionForm()!;
	private UserAddForm userAddForm = new UserAddForm()!;

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
		{
			return;
		}

		var userIdRequest = await sessionStorage.GetAsync<int>("userID");

		if (!userIdRequest.Success)
		{
			isAuthorized = false;
			StateHasChanged();
			return;
		}

		userId = userIdRequest.Value;
		var teamMemberSeat = await teamServiceProvider.GetTeamMember(
			accountId: userId,
			teamId: Id
		);

		if (teamMemberSeat is { Role: TeamMemberSeat.TeamRole.Admin })
		{
			team = teamMemberSeat.Team;
			isAuthorized = true;
		}

		StateHasChanged();
	}

	public async Task AddUser()
	{

		if(await userServiceProvider.UserWithLoginExists(userAddForm.NewName)){
			var userAddId = await userServiceProvider.GetUserAccountId(userAddForm.NewName);
			var ifAlreadyInTeam = await teamServiceProvider.GetTeamMember(userAddId.Value, Id);
			if(ifAlreadyInTeam is not { })
			{
				await teamServiceProvider.AddTeamMember(userAddId.Value, Id);
				StateHasChanged();
			}

			

		}
		
	}

	public async Task RemoveUser()
	{
		if(await userServiceProvider.UserWithLoginExists(userDeletionForm.ConfirmUserName)){


			var userRemoveId = await userServiceProvider.GetUserAccountId(userDeletionForm.ConfirmUserName);
			var teamMemberSeat = await teamServiceProvider.GetTeamMember(userRemoveId.Value, Id);
			await teamServiceProvider.RemoveTeamMember(teamMemberSeat.Id);
			NavigationManager.NavigateTo("/teams");
			StateHasChanged();
		}
		
	}

    private class UserDeletionForm
    {
        public string ConfirmUserName { get; set; } = string.Empty;

        private readonly UserAccount user;

        //public bool NamesMatch => user.Login == ConfirmUserName;

        //public UserDeletionForm(UserAccount user)
        //{
        //    this.user = user;
        //}
    }

    private class UserAddForm
    {
        [Required]
        public string NewName { get; set; }

        //private readonly UserAccount user;

        //public UserAddForm(Team team)
        //{
        //    this.team = team;

        //    NewName = team.Name;
        //}
    }
}


@*@page "/members"
@using ImageAnnotationTool.Pages.AppPages.Shared
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.WebUtilities
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject IProjectServiceProvider projectServiceProvider;
@inject ITeamServiceProvider teamServiceProvider;
@inject IUserAccountsServiceProvider userAccountsService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;

<div class="page-after-logon">
	<nav>
			
					<h5 class="muted-headers">
						<a href="/teams">Wszystkie Zespoły</a>
						
					</h5>
<_leftMenu/>
</nav>
<div class="main-container">
	
	
		<table>
			<tr class="container-team-setting">
				<th>Zespół Alpha</th>
				<td>Edycja</td> 
				<td>Dodaj członków</td>
			</tr>
		</table>
		<h5 class="muted-headers">
				Członkowie Zespołu mogą przyjąć poszczególne role:
				</h5>
		<ul>
			<li>
				<strong>
					Użytkownik
				</strong>
				<ul>
					<li>
						dziedziczy wszystkie uprawnienia po Administratorze,
					</li>
					<li>
						modyfikacja uprawnień wszczystkich osób w zespole,
					</li>
					<li>
						przekazanie roli Właściciela i przyjęcie uprawnień Użytkownika. 
					</li>
				</ul>
			</li>
			<li>
				<strong>
					Menadżer Projektu
				</strong>
				<ul>
					<li>
						dziedziczy wszystkie uprawnienia po Administratorze,
					</li>
					<li>
						modyfikacja uprawnień wszczystkich osób w zespole,
					</li>
					<li>
						przekazanie roli Właściciela i przyjęcie uprawnień Użytkownika. 
					</li>
				</ul>
			</li>
			<li>
				<strong>
					Administrator
				</strong>
				<ul>
					<li>
						dziedziczy wszystkie uprawnienia po Administratorze,
					</li>
					<li>
						modyfikacja uprawnień wszczystkich osób w zespole,
					</li>
					<li>
						przekazanie roli Właściciela i przyjęcie uprawnień Użytkownika. 
					</li>
				</ul>
			</li>
			<li>
				<strong>
					Właściciel
				</strong>
				<ul>
					<li>
						dziedziczy wszystkie uprawnienia po Administratorze,
					</li>
					<li>
						modyfikacja uprawnień wszczystkich osób w zespole,
					</li>
					<li>
						przekazanie roli Właściciela i przyjęcie uprawnień Użytkownika. 
					</li>
				</ul>
			</li>
		</ul>
		
		<table class="table table-hover">
		@foreach (var itemTeam in teams){
			@foreach(var user in itemTeam.Team.Members){
					<tr class="table-active">
						<th scope="row">@user.AssignedUser.Login</th>
						<td>Rola</td>
						<td @onclick="DeleteUserFromTeam">Usuń</td>
					</tr>
			}
			}
		</table>

</div>

</div>

@code{
	private int currentUserID, teamID;
	private bool isConnected = false;
	private List<TeamMemberSeat> teams = new List<TeamMemberSeat>();

	protected override async Task OnInitializedAsync()
	{
		//var uri = new Uri(NavigationManager.Uri);
		//string id = QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var value) ? value : "";
		//teamID = int.Parse(id);
		//var team = await teamServiceProvider.GetTeamById(teamID);
		//teamName = team.Name;
		teams = await teamServiceProvider.GetTeamMembers(teamID);

		StateHasChanged();
		//jeśli teamid jest ok to zostaje a jak nie to przerzuca do zespołów
	}


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			isConnected = true;
			var currentUser = await ProtectedSessionStore.GetAsync<int>("userID");

			currentUserID = currentUser.Success?currentUser.Value:0;
			//czy te teamID jest tu poprawne czy current userid
			var uri = new Uri(NavigationManager.Uri);
			string id = QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var value) ? value : "";
			teamID = int.Parse(id);

			teams = await teamServiceProvider.GetTeamMembers(teamID);
			StateHasChanged();

		}       
	}
	private async Task addUserToTeam()
	{
		var teams = await teamServiceProvider.GetTeamMembers(teamID);
		
		if(currentUserID==i ){
			
		}
		teamServiceProvider.AddTeamMember();
	}
	private void DeleteUserFromTeam(){
		//projectServiceProvider.RemoveProjectMember();
	}
	}*@