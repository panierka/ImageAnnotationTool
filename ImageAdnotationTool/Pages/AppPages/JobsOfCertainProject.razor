@page "/job/{Id:int}"
@using ImageAnnotationTool.Pages.AppPages.Shared
@using ImageAnnotationToolDataAccessLibrary.Models.ImageAnnotation
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using System.ComponentModel.DataAnnotations
@inject ProtectedSessionStorage sessionStorage;
@inject IProjectServiceProvider projectServiceProvider;
@inject ITeamServiceProvider teamServiceProvider;
@inject IUserAccountsServiceProvider userAccountsService;
@inject IJobsServiceProvider jobsServiceProvider;
@inject IAnnotatedImagesServiceProvider imagesServiceProvider;
@inject IAnnotationServiceProvider annotationServiceProvider;
@inject NavigationManager NavigationManager;

<div class="page-after-logon">
	@if (isAuthorized)
	{


		@if (isModalOpen)
		{
			<BlazoredModal class="blazormodal">
				<button @onclick="HideModal">Zamknij</button>
				<EditForm class="styleEditForm" Model="@formData" OnValidSubmit="SubmitForm">
					<h3>Utwórz zadanie dla użytkownika:</h3>
					<InputText class="form-control" placeholder="Nazwa użytkownika" @bind-Value="formData.Name"/>
					<ValidationMessage For="@(() => formData.Name)" />
					<button type="submit">Zatwierdź</button>

				</EditForm>



			</BlazoredModal>

		}
		else
		{

			
			<nav>
			
					<h5 class="muted-headers">
						<a href="/teams">Wszystkie Zespoły</a>
						
					</h5>
					<_leftMenu/>

			</nav>
			
			<div>
				<button onclick="@(() => NavigationManager
						.NavigateTo($"/charts/{Id}"))">
					Statystyki projektu
				</button>
				<br />
				<br />
				<button onclick="@(() => DownloadCocoJson())">
					Pobierz plik COCO
				</button>		
			</div>

			<div class="main-container">

					<h3>
						@projectName
					</h3>
					
					<p class="muted-headers" @onclick="(()=>NavigateToSettingProjectPage(Id))">
					Edycja Projektu 
					</p>
					<h5 class="muted-headers">
					TWOJE PRACE
					</h5>
				
				
				<ul class="container-projects">
					@foreach (var item in jobs)
			{
					<li @onclick="@(async () => await NavigateToAnnotatePage(item.Id))">
						<h5 class="project-name">
							@item.Id.ToString()
							
						</h5>
					</li>
			}
				@if(classCount == 0)
					{
						<li>
							<h5 class="project-name">
								Najpierw zdefiniuj klasy.
							</h5>						
						</li>
					}
					else
					{
					<li @onclick="@ShowModal">
						<h5 class="project-name">
							Dodaj nową pracę +
						</h5>
					</li>
					}
				</ul>


			</div>
		}

	}
	else
{
    <p>Wczytywanie...</p>
}
</div>


@code {

	//private List<TeamMemberSeat> teams = new List<TeamMemberSeat>();

	//private List<ProjectMemberSeat> projects = new List<ProjectMemberSeat>();
	private List<Job> jobs = new List<Job>();
	private TeamMemberSeat teamMemberSeat = null!;
	private ProjectMemberSeat projectMemberSeat = null!;

	private string? projectName;
	[Parameter]
	public int Id { get; set; }

	private bool isAuthorized = false;
	private int teamId;

	private int classCount;

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
		{
			return;
		}

		var userIdRequest = await sessionStorage.GetAsync<int>("userID");

		if (!userIdRequest.Success)
		{
			isAuthorized = false;
			StateHasChanged();
			return;
		}

		var userId = userIdRequest.Value;

		teamId = (await projectServiceProvider.GetProjectById(Id)).Team.Id;
		projectName = (await projectServiceProvider.GetProjectById(Id)).Name;
		teamMemberSeat = await teamServiceProvider.GetTeamMember(
	accountId: userId,
	teamId: teamId
		);

		projectMemberSeat = await projectServiceProvider.GetProjectMember(
	teamMemberSeatId: teamMemberSeat.Id,
	projectId: Id
		);

		var userInProjectSeat = await projectServiceProvider.GetProjectMember(teamMemberSeat.Id, Id);
		jobs = await jobsServiceProvider.GetJobsOfProjectMemeber(userInProjectSeat.Id);

		isAuthorized =true;

		var classes = await annotationServiceProvider.GetAnnotationClasses(Id);
		classCount = classes.Count;

		StateHasChanged();
	}


	//For projects
	private bool isModalOpen;
	private class FormData
	{
		[Required(ErrorMessage = "Nazwa użytkownika - Pole wymagane")]
		public string Name { get; set; }
		public string ErrorMessage{get; set; }	

	}
	private FormData formData = new FormData();

	private void ShowModal()
	{
		isModalOpen = true;
	}

	private void HideModal()
	{
		isModalOpen = false;
	}
	private async Task SubmitForm()
	{
		var accountIdRequest= await userAccountsService.GetUserAccountId(formData.Name);
		if (accountIdRequest is null)
		{
			formData.ErrorMessage="Brak takiego użytkownika";
			return;
		}

		var invitedAnnotatorTeamSeat = await teamServiceProvider.GetTeamMember(accountIdRequest.Value, teamId);
		var userInProjectSeat = await projectServiceProvider.GetProjectMember(invitedAnnotatorTeamSeat.Id, Id);

		Job job = new() { AssignedProjectMember = userInProjectSeat };

		await jobsServiceProvider.CreateJob(job, Id);

		if (invitedAnnotatorTeamSeat.Id == teamMemberSeat.Id)
		{
			jobs = await jobsServiceProvider.GetJobsOfProjectMemeber(userInProjectSeat.Id);
		}

		StateHasChanged();
		isModalOpen = false;
	}
	private void NavigateToSettingProjectPage(int projectId)
	{
		NavigationManager.NavigateTo($"/projectsettings/{projectId}");
		StateHasChanged();

	}
	private async Task NavigateToAnnotatePage(int jobId)
	{
		//TODO: Dać dobry link

		var count = await imagesServiceProvider.GetAnnotatedImagesInProjectCount(jobId);

		if (count > 0)
		{
			NavigationManager.NavigateTo($"/annotate/{jobId}/{0}");
			return;
		}

		NavigationManager.NavigateTo($"/upload/{jobId}");

		StateHasChanged();
	}

	private void DownloadCocoJson()
	{
		NavigationManager.NavigateTo($"/download/{Id}", true);
	}

	//TODO: Przy usuwaniu projektu jest aktywne odwołanie do niego może jakoś autoamtycznie odświeżyć stornę, zeby z tego wyjść

}
