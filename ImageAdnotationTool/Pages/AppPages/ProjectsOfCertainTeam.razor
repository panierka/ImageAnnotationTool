@page "/project/{Id:int}"
@using ImageAnnotationTool.Pages.AppPages.Shared
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using System.ComponentModel.DataAnnotations
@inject ProtectedSessionStorage sessionStorage;
@inject IProjectServiceProvider projectServiceProvider;
@inject ITeamServiceProvider teamServiceProvider;
@inject IUserAccountsServiceProvider userAccountsService;
@inject NavigationManager NavigationManager;

<div class="page-after-logon">
	@if (isAuthorized)
	{


		@if (isModalOpen)
		{
			<BlazoredModal class="blazormodal">
				<button @onclick="HideModal">Zamknij</button>
				<EditForm class="styleEditForm" Model="@formData" OnValidSubmit="SubmitForm">
					<h3>Dodaj projekt</h3>
					<InputText class="form-control" @bind-Value="formData.Project"/>
					<ValidationMessage For="@(() => formData.Project)" />
					<button type="submit">Zatwierdź</button>

				</EditForm>



			</BlazoredModal>

		}
		else
		{

			
			<nav>
			
					<h5 class="muted-headers">
						<a href="/teams">Wszystkie Zespoły</a>
						
					</h5>
					<_leftMenu/>

			</nav>

			<div class="main-container">


					<h3>
						@teamName
					</h3>
					<h5 class="muted-headers">
					TWOJE PROJEKTY
				</h5>
				
				
				<ul class="container-projects">
					@foreach (var item in projects)
			{
					<li @onclick="@(() =>NavigateToJobPage(item.Id))">
						<h5 class="project-name">
							@item.Project.Name
							
						</h5>
					</li>
			}
					<li @onclick="@ShowModal">
						<h5 class="project-name">
							Dodaj nowy projekt +
						</h5>
					</li>
				</ul>


			</div>
		}

	}
	else
{
    <p>Wczytywanie...</p>
}
</div>


@code {

	private List<TeamMemberSeat> teams = new List<TeamMemberSeat>();

	private List<ProjectMemberSeat> projects = new List<ProjectMemberSeat>();
	private TeamMemberSeat teamMemberSeat = null!;

	private string? teamName;
	[Parameter]
	public int Id { get; set; }

	private bool isAuthorized = false;
	private Team team = null!;

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
		{
			return;
		}

		var userIdRequest = await sessionStorage.GetAsync<int>("userID");

		if (!userIdRequest.Success)
		{
			isAuthorized = false;
			StateHasChanged();
			return;
		}

		var userId = userIdRequest.Value;
		teamMemberSeat = await teamServiceProvider.GetTeamMember(
			accountId: userId,
			teamId: Id
		);

		projects = await projectServiceProvider.GetProjectsOfTeamMember(teamMemberSeat.Id);
		teams = await teamServiceProvider.GetTeamMemberSeatsOfUserAccount(userId);
		isAuthorized =true;
		StateHasChanged();
	}


	//For projects
	private bool isModalOpen;
	private class FormData
	{
		[Required(ErrorMessage = "Nazwa projektu - Pole wymagane")]
		public string Project { get; set; }
		public string ErrorMessage{get; set; }	

	}
	private FormData formData = new FormData();

	private void ShowModal()
	{
		isModalOpen = true;
	}

	private void HideModal()
	{
		isModalOpen = false;
	}
	private async Task SubmitForm()
	{
		var checkIfNameExists = await projectServiceProvider.GetProject(formData.Project);

		if (checkIfNameExists is {})
		{
			formData.ErrorMessage = "Nazwa projektu jest już zajęta";
		}
		else
		{
			Project project = new();
			project.Name = formData.Project;
			Team team = await teamServiceProvider.GetTeamById(Id);
			await projectServiceProvider.CreateProject(project, team!);
			//TODO: Dopytać czy tam jest current userid

			//
			await projectServiceProvider.AddProjectMember(teamMemberSeat.Id, project.Id);
			await projectServiceProvider.SetProjectMembersRole(
				teamMemberId: teamMemberSeat.Id,
				projectId: project.Id,
				role: ProjectMemberSeat.ProjectRole.Admin
			);
			projects = await projectServiceProvider.GetProjectsOfTeamMember(teamMemberSeat.Id);
			StateHasChanged();
			isModalOpen = false;
		}

	}

	private void NavigateToJobPage(int projectID)
    {
        NavigationManager.NavigateTo($"/job/{projectID}");
    }
	private void NavigateToProjectPage(int teamID)
    {
        NavigationManager.NavigateTo($"/project/{Id}");
    }
}
