@page "/projectsettings/{Id:int}"
@using ImageAnnotationTool.Pages.AppPages.Shared
@using ImageAnnotationToolDataAccessLibrary.Models.ImageAnnotation
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using System.ComponentModel.DataAnnotations;
@inject ProtectedSessionStorage sessionStorage;
@inject ITeamServiceProvider teamServiceProvider;
@inject IProjectServiceProvider projectServiceProvider;
@inject NavigationManager NavigationManager;
@inject IAnnotationServiceProvider annotationServiceProvider;
@inject IUserAccountsServiceProvider userServiceProvider;

<div class="page-after-logon">
    <_leftMenu />

    @if (isAuthorized)
    {
        <PageTitle>
            @($"{@project.Name} - ustawienia")
        </PageTitle>

        <div class="main-container">
            <EditForm Model="@projectRenameForm"
                  OnValidSubmit="@RenameProject">
                Tutaj możesz zmienić nazwę projektu:
                <DataAnnotationsValidator />
                <InputText class="form-control"
                       placeholder="@project.Name"
                       @bind-Value="@projectRenameForm.NewName"></InputText>
                <button disabled="@(!context.Validate() || !context.IsModified())">
                    Zmień nazwę
                </button>
            </EditForm>

            <br />
            <EditForm Model="@projectDeletionForm"
                  OnValidSubmit="@RemoveProject">
                Wpisz nazwę projektu, aby umożliwić jego usunięcie.
                <InputText class="form-control"
                       @bind-Value="@projectDeletionForm.ConfirmProjectName"></InputText>
                <button disabled="@(!projectDeletionForm.NamesMatch)">
                    Usuń
                </button>
            </EditForm>

            
		<br/>               
			<EditForm 
                Model="@userAddForm"
                OnValidSubmit="@AddUser">
                Dodaj użytkownika do zespołu:
                <DataAnnotationsValidator/>
                <InputText 
                    class="form-control"
                    placeholder="Login użytkownika"
                    @bind-Value="@userAddForm.NewName"></InputText>
                <button 
                    disabled="@(!context.Validate() || !context.IsModified())">
                    Dodaj
                </button>
			</EditForm>
            
			<br />
			<EditForm 
                Model="@userDeletionForm" 
                OnValidSubmit="@RemoveUser">
                Usuń użytkownika z zespołu:
                <InputText 
                    class="form-control"
                    placeholder="Login użytkownika"
                    @bind-Value="@userDeletionForm.ConfirmUserName"></InputText>            
                <button >
                    Usuń
                </button>
			</EditForm>
            <h5 class="muted-headers">
                Dodani użytkownicy do projektu:
            </h5>
            <ul>
                @foreach(var item in membersOfProject)
                {
                    <li>@item.AssignedTeamMember.AssignedUser.Login</li>
                }
            </ul>
            <br />
            <EditForm Model="@adnotationClass"
                  OnValidSubmit="@AddAdnotationClass">
                Wpisz nazwę klasy:
                <InputText class="form-control"
                       placeholder="nazwa Twojego projektu"
                       @bind-Value="@adnotationClass.Name"></InputText>
                <button>
                    Dodaj
                </button>
            </EditForm>
            <h5 class="muted-headers">
                Utworzone klasy adnotacji:
            </h5>
            <ul>
                @foreach(var item in listOfClasses)
                {
                    <li>@item.Name</li>
                }
            </ul>
        </div>
    }
    else
    {
        <PageTitle>
            Błąd
        </PageTitle>
        <div>
            Nie odnaleziono strony.
        </div>
    }


</div>
@code {
    [Parameter]
    public int Id { get; set; }

    private bool isAuthorized = false;
    private Project project = null!;
    private ProjectDeletionForm projectDeletionForm = null!;
    private ProjectRenameForm projectRenameForm = null!;
    private AdnotationClass adnotationClass = new AdnotationClass();
    private List<AnnotationClass> listOfClasses=new List<AnnotationClass>();
    private UserDeletionForm userDeletionForm = new UserDeletionForm()!;
    private UserAddForm userAddForm = new UserAddForm()!;
    private List<ProjectMemberSeat> membersOfProject =new List<ProjectMemberSeat>();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var userIdRequest = await sessionStorage.GetAsync<int>("userID");

        if (!userIdRequest.Success)
        {
            isAuthorized = false;
            StateHasChanged();
            return;
        }

        var userId = userIdRequest.Value;
        var tmp = await projectServiceProvider.GetProjectById(Id);
        var teamId = tmp.Team.Id;
        var teamMemberId = (await teamServiceProvider.GetTeamMember(userId, teamId)).Id;
        var projectMemberSeat = await projectServiceProvider.GetProjectMemberLoaded(
            teamMemberSeatId: teamMemberId,
            projectId: Id
        );

        if (projectMemberSeat is { Role: ProjectMemberSeat.ProjectRole.Admin })
        {
            project = projectMemberSeat.Project;
            projectDeletionForm = new(project);
            projectRenameForm = new(project);
            listOfClasses = await annotationServiceProvider.GetAnnotationClasses(Id);
            membersOfProject = await projectServiceProvider.GetProjectMembers(Id);
            isAuthorized = true;
        }

        StateHasChanged();
    }

    public async Task RenameProject()
    {
        project.Name = projectRenameForm.NewName;
        await projectServiceProvider.UpdateProject(Id, project);
        StateHasChanged();
    }

    public async Task RemoveProject()
    {
        await projectServiceProvider.DeleteProject(Id);
        NavigationManager.NavigateTo("/projects");
    }

    private class ProjectDeletionForm
    {
        public string ConfirmProjectName { get; set; } = string.Empty;

        private readonly Project project;

        public bool NamesMatch => project.Name == ConfirmProjectName;

        public ProjectDeletionForm(Project project)
        {
            this.project = project;
        }
    }

    private class ProjectRenameForm
    {
        [Required]
        public string NewName { get; set; }

        private readonly Project project;

        public ProjectRenameForm(Project project)
        {
            this.project = project;

            NewName = project.Name;
        }
    }
    public async Task AddAdnotationClass()
    {

        await annotationServiceProvider.CreateAnnotationClass(adnotationClass.Name, Id);
        listOfClasses = await annotationServiceProvider.GetAnnotationClasses(Id);

        StateHasChanged();

    }


    private class AdnotationClass
    {
        [Required]
        public string Name { get; set; }


    }

    public async Task AddUser()
    {

        if(await userServiceProvider.UserWithLoginExists(userAddForm.NewName)){
            var userAddId = await userServiceProvider.GetUserAccountId(userAddForm.NewName);
            var teamId = (await projectServiceProvider.GetProjectById(Id)).Team.Id;
            var teamMemberSeat = await teamServiceProvider.GetTeamMember(userAddId.Value,teamId );
            var ifAlreadyInTeam = await projectServiceProvider.GetProjectMember(teamMemberSeat.Id, Id);

            if(ifAlreadyInTeam is not { })
            {
                await projectServiceProvider.AddProjectMember(teamMemberSeat.Id, Id);
                membersOfProject = await projectServiceProvider.GetProjectMembers(Id);
                StateHasChanged();
            }
        }

    }

    public async Task RemoveUser()
    {
        if(await userServiceProvider.UserWithLoginExists(userDeletionForm.ConfirmUserName)){


            var userRemoveId = await userServiceProvider.GetUserAccountId(userDeletionForm.ConfirmUserName);
            var teamId = (await projectServiceProvider.GetProjectById(Id)).Team.Id;
            var teamMemberSeat = await teamServiceProvider.GetTeamMember(userRemoveId.Value,teamId );
            var projectMemberSeat = await projectServiceProvider.GetProjectMember(teamMemberSeat.Id, Id);
            await projectServiceProvider.RemoveProjectMember(projectMemberSeat.Id);
            membersOfProject = await projectServiceProvider.GetProjectMembers(Id);
			NavigationManager.NavigateTo("/teams");
			StateHasChanged();
		}
		
	}

    private class UserDeletionForm
    {
        public string ConfirmUserName { get; set; } = string.Empty;

        private readonly UserAccount user;

        //public bool NamesMatch => user.Login == ConfirmUserName;

        //public UserDeletionForm(UserAccount user)
        //{
        //    this.user = user;
        //}
    }

    private class UserAddForm
    {
        [Required]
        public string NewName { get; set; }

        //private readonly UserAccount user;

        //public UserAddForm(Team team)
        //{
        //    this.team = team;

        //    NewName = team.Name;
        //}
    }
}
