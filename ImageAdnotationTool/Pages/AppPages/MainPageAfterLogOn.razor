@page "/teams"
@using ImageAnnotationTool.Pages.AppPages.Shared;
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using ImageAnnotationToolDataAccessLibrary.Services;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components;
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject IProjectServiceProvider projectServiceProvider;
@inject ITeamServiceProvider teamServiceProvider;
@inject IUserAccountsServiceProvider userAccountsService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;

<div class="page-after-logon">


@if (isConnected)
{
    

	@if (isModalOpen)
		{
			<BlazoredModal class="blazormodal">
				<button @onclick="HideModal">Zamknij</button>
					<EditForm class="styleEditForm" Model="@formData" OnValidSubmit="SubmitForm">
						<h3>Dodaj zespół</h3>
						<InputText class="form-control" @bind-Value="formData.Team" placeholder="@currentUserID" />
						<ValidationMessage For="@(() => formData.Team)" />
						<button type="submit">Zatwierdź</button>
						
					</EditForm>
				
					
				
			</BlazoredModal>

		}
		else{
	
			<nav>
			
					<h5 class="muted-headers">
						Zespoły
						<button type="button" @onclick="@ShowModal">
							+
						</button>
					</h5>

				<_leftMenu/>

		</nav>
		<div class="main-container">
	<h5 class="muted-headers">
				TWOJE ZESPOŁY
				</h5>
	<section class="container-teams">
			@if (teams == null || !teams.Any())
			{
				<ul  class="container-projects">
			<li @onclick="@ShowModal">
				<h5 class="project-name" >
					Dodaj zespół.
				</h5>
			</li>

		</ul>
			}
			else{
			@foreach (var itemTeam in teams){
				
				<h5 @onclick="@(() =>NavigateToProjectPage(itemTeam.Team.Id))">
					@itemTeam.Team.Name
				</h5>
	
		@if (@itemTeam.Team.Projects == null || !@itemTeam.Team.Projects.Any()){
			<ul class="container-projects">
				<p>Brak projektów.</p>
				</ul>
		}else{
		<ul class="container-projects">
					@foreach (var itemProject in @itemTeam.Team.Projects)
					{
							<li>
					<h5 class="project-name">
						@itemProject.Name
					</h5>
					</li>
					}
							
		</ul>
		}
		}}
	</section>
		</div>
		}
		}
else
{
    <p>Wczytywanie...</p>
}

   @* </Authorized>
    <NotAuthorized>
        <h1>Access denied</h1>
        <p>You need to log in to view this page.</p>
    </NotAuthorized>
</AuthorizeView>*@
</div>


@code {


	private List<TeamMemberSeat> teams = new List<TeamMemberSeat>();
	private int currentUserID;
	private bool isConnected = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			isConnected = true;
			var currentUser = await ProtectedSessionStore.GetAsync<int>("userID");

			currentUserID = currentUser.Success?currentUser.Value:0;
			teams = await teamServiceProvider.GetTeamsOfUserAccount(currentUserID);
			StateHasChanged();

		}       
	}

	protected override async Task OnInitializedAsync(){


		teams = await teamServiceProvider.GetTeamsOfUserAccount(currentUserID);
		StateHasChanged();
	}
	//For teams
	private bool isModalOpen;
	private class FormData
	{
		[Required(ErrorMessage = "Nazwa grupy - Pole wymagane")]

		public string Team { get; set; }
		public string ErrorMessage{get; set; }	

	}
	private FormData formData = new FormData();

	private void ShowModal()
	{
		isModalOpen = true;
	}

	private void HideModal()
	{
		isModalOpen = false;
	}
	private async Task SubmitForm()
	{
		var checkIfTeamNameExists = await teamServiceProvider.GetTeam(formData.Team);

		if (checkIfTeamNameExists is {})
		{
			formData.ErrorMessage = "Nazwa grupy jest już zajęta";
		}
		else
		{
			Team team = new();
			team.Name = formData.Team;
			await teamServiceProvider.CreateTeam(team);
			await teamServiceProvider.AddTeamMember(currentUserID, team.Id);
			await teamServiceProvider.SetTeamMembersRole(
				accountId: currentUserID, 
				teamId: team.Id, 
				role: TeamMemberSeat.TeamRole.Admin
			);
			
			teams = await teamServiceProvider.GetTeamsOfUserAccount(currentUserID);
			StateHasChanged();
			isModalOpen = false;
		}

	}

	private void NavigateToProjectPage(int teamID)
    {
        NavigationManager.NavigateTo($"/project/{teamID}");
    }


	}