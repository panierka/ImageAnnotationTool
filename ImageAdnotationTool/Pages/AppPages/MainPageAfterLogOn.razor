@page "/teams"
@using ImageAnnotationTool.Pages.AppPages.Shared;
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using ImageAnnotationToolDataAccessLibrary.Services;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject IProjectServiceProvider projectServiceProvider;
@inject ITeamServiceProvider teamServiceProvider;
@inject IUserAccountsServiceProvider userAccountsService;
@inject NavigationManager NavigationManager;


<div class="page-after-logon">
<_leftMenu/>
@*
<AuthorizeView>
    <Authorized>*@
        @*<h1>Welcome, you are now logged in!</h1>
        <p>This is a protected page, you need to be logged in to view it.</p>*@
<div class="main-container">
	@if (isModalOpen)
		{
			<BlazoredModal class="blazormodal">
				
					<EditForm class="styleEditForm" Model="@formData" OnValidSubmit="SubmitForm">
						<h3>Dodaj zespół</h3>
						<InputText class="form-control" @bind-Value="formData.Team" placeholder="@currentUserID" />
						<ValidationMessage For="@(() => formData.Team)" />
						<button type="submit">Zatwierdź</button>
						<button @onclick="HideModal">Zamknij</button>
					</EditForm>
				
					
				
			</BlazoredModal>

		}
		else{
	<h5 class="muted-headers">
				TWOJE ZESPOŁY
				</h5>
	<section class="container-teams">
			@if (teams == null || !teams.Any())
			{
				<ul  class="container-projects">
			<li @onclick="@ShowModal">
				<h5 class="project-name" >
					Dodaj zespół.
				</h5>
			</li>

		</ul>
			}
			else{
			@foreach (var itemTeam in teams){
				<h5>
					@itemTeam.Team.Name
				</h5>
		@*<table>
			<tr class="container-team-setting">
				<th>@itemTeam.Team.Name</th>
				<td>Projekty</td>
				<td>Członkowie</td>
				<td>Ustawienia</td>
			</tr>
		</table>*@
		@if (@itemTeam.Team.Projects == null || !@itemTeam.Team.Projects.Any()){
			<ul class="container-projects">
				
							<li>
					<h5 class="project-name">
						Dodaj projekt.
					</h5>
					</li>
				</ul>
		}else{
		<ul class="container-projects">
					@foreach (var itemProject in @itemTeam.Team.Projects)
					{
							<li>
					<h5 class="project-name">
						@itemProject.Name
					</h5>
					</li>
					}
							
		</ul>
		}
		}}
	</section>
		}
	</div>
   @* </Authorized>
    <NotAuthorized>
        <h1>Access denied</h1>
        <p>You need to log in to view this page.</p>
    </NotAuthorized>
</AuthorizeView>*@
</div>


@code {
	//TODO: Dodanie zespołu. Dodanie projektu.
	//TODO: Działanie opiera się na przechowywwaniu informacji w protected session obecnie wybrany zespoł, projekt, zadanie i użytkownik
	//
	//HttpContext.Session.SetString("MyKey", "MyValue");
	//var currentLogInUserId = await ProtectedSessionStore.GetAsync<int>(COUNT_KEY);

	private List<TeamMemberSeat> teams = new List<TeamMemberSeat>();
	private int currentUserID;


	protected override async Task OnInitializedAsync(){

		var currentUser = await ProtectedSessionStore.GetAsync<int>("userID");
		//TODO: Zczytanie prawidłwoego id
		currentUserID = currentUser.Value;
		teams = await teamServiceProvider.GetTeamsOfUserAccount(currentUserID);
		StateHasChanged();
	}

	private bool isModalOpen;
	private class FormData
	{
		[Required(ErrorMessage = "Nazwa grupy - Pole wymagane")]

		public string Team { get; set; }
		public string ErrorMessage{get; set; }	

	}
	private FormData formData = new FormData();

	private void ShowModal()
	{
		isModalOpen = true;
	}

	private void HideModal()
	{
		isModalOpen = false;
	}
	private async Task SubmitForm()
	{
		var checkIfTeamNameExists = await teamServiceProvider.GetTeam(formData.Team);

		if (checkIfTeamNameExists==null)
		{
			formData.ErrorMessage = "Nazwa grupy jest już zajęta";
		}
		else
		{
			Team team = new();
			team.Name = formData.Team;
			await teamServiceProvider.CreateTeam(team);
			await teamServiceProvider.AddTeamMember(team.Id,currentUserID);
			teams = await teamServiceProvider.GetTeamsOfUserAccount(currentUserID);
			StateHasChanged();
			isModalOpen = false;
		}
		
	

		
	}


	//private void asdasd(){
	//	teamServiceProvider.CreateTeam()
	//}

	}