@page "/settings/{Id:int}"
@using ImageAnnotationTool.Pages.AppPages.Shared
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using System.ComponentModel.DataAnnotations;
@inject ProtectedSessionStorage sessionStorage;
@inject ITeamServiceProvider teamServiceProvider;
@inject NavigationManager NavigationManager;

<div class="page-after-logon">
<_leftMenu/>

	@if (isAuthorized)
	{
        <PageTitle>
            @($"{@team.Name} - ustawienia")
        </PageTitle>

		<div class="main-container">                
			<EditForm 
                Model="@teamRenameForm"
                OnValidSubmit="@RenameTeam">
                Tutaj możesz zmienić nazwę zespołu:
                <DataAnnotationsValidator/>
                <InputText 
                    class="form-control"
                    placeholder="@team.Name"
                    @bind-Value="@teamRenameForm.NewName"></InputText>
                <button 
                    disabled="@(!context.Validate() || !context.IsModified())">
                    Zmień nazwę
                </button>
			</EditForm>
            
			<br />
			<EditForm 
                Model="@teamDeletionForm" 
                OnValidSubmit="@RemoveTeam">
                Wpisz nazwę zespołu, aby umożliwić jego usunięcie.
                <InputText 
                    class="form-control"
                    placeholder="nazwa Twojego zespołu"
                    @bind-Value="@teamDeletionForm.ConfirmTeamName"></InputText>            
                <button disabled="@(!teamDeletionForm.NamesMatch)">
                    Usuń
                </button>
			</EditForm>
		</div>
	}
	else
	{
        <PageTitle>
            Błąd
        </PageTitle>
		<div>
			Nie odnaleziono strony.
		</div>
	}
    

</div>
@code {
    [Parameter]
    public int Id { get; set; }

    private bool isAuthorized = false;
    private Team team = null!;
    private TeamDeletionForm teamDeletionForm = null!;
    private TeamRenameForm teamRenameForm = null!;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var userIdRequest = await sessionStorage.GetAsync<int>("userID");

        if (!userIdRequest.Success)
        {
            isAuthorized = false;
            StateHasChanged();
            return;
        }

        var userId = userIdRequest.Value;
        var teamMemberSeat = await teamServiceProvider.GetTeamMember(
            accountId: userId,
            teamId: Id
        );

        if (teamMemberSeat is {})
        {
            team = teamMemberSeat.Team;
            teamDeletionForm = new(team);
            teamRenameForm = new(team);
            isAuthorized = true;
        }

        StateHasChanged();
    }

    public async Task RenameTeam()
    {
        team.Name = teamRenameForm.NewName;
        await teamServiceProvider.UpdateTeam(Id, team);
        StateHasChanged();
    }

    public async Task RemoveTeam()
    {
        await teamServiceProvider.DeleteTeam(Id);
        NavigationManager.NavigateTo("/teams");
    }

    private class TeamDeletionForm
    {
        public string ConfirmTeamName { get; set; } = string.Empty;

        private readonly Team team;

        public bool NamesMatch => team.Name == ConfirmTeamName;

        public TeamDeletionForm(Team team)
        {
            this.team = team;
        }
    }

    private class TeamRenameForm
    {
        [Required]
        public string NewName { get; set; }

        private readonly Team team;

        public TeamRenameForm(Team team)
        {
            this.team = team;

            NewName = team.Name;
        }
    }
}
