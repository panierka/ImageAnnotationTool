@page "/upload"
@using System.Text;
@using ImageAnnotationToolDataAccessLibrary.Models.ImageAnnotation;
@using ImageProcessing;
@inject IAnnotatedImagesProjectDatabaseServiceProvider databaseProvider;

<PageTitle>Test wczytywania plików</PageTitle>

<h1>Naciśnij, aby wczytać</h1>

<button 
    class ="btn btn-primary"
    @onclick="@AddFilesToProject">

    Prześlij wybrane pliki do projektu
</button>
<br />
<br />

<InputFile OnChange="@LoadFilesAsync"
    multiple
    webkitdirectory
    draggable="true" 
    accept=".png,.jpg,.jpeg"/>

@if (images is {})
{
    <table>
    @for (int i = 0; i < images.Count; i += 3)
    {
        <tr>
            @for (int j = 0; j < 3 && i + j < images.Count; j++)
            {
                var image = images[i + j];
                <td>                      
                    <img src=@image.SourceBase64
                         alt=@image.Name
                         title=@image.Name
                         style="width: 300px; height: auto"/>
                </td>
            }
        </tr>
    }
    </table>
}

@code{
    private List<ImageData> images = new();

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        images.Clear();
        var maxFiles = e.FileCount;
        var files = e.GetMultipleFiles(maxFiles);

        foreach (var file in files)
        {
            var base64 = await FileConverter.BrowserFileToBase64Async(file);
            var image = new ImageData
            {
                Name = file.Name,
                SourceBase64 = base64,
            };
            images.Add(image);
        }

        StateHasChanged();
    }

    private void AddFilesToProject()
    {
        var annotatedImages = images.Select(i =>
        {
            return new AnnotatedImage
                {
                    ImageData = i
                };
        }).ToList();

        images.Clear();
        StateHasChanged();

        databaseProvider.AddAnnotatedImages(annotatedImages);
    }
}
