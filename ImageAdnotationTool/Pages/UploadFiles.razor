@page "/upload/{JobId:int}"
@using System.Text;
@using ImageAnnotationToolDataAccessLibrary.Models.ExifExtraction;
@using ImageAnnotationToolDataAccessLibrary.Models.ImageAnnotation;
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement;                                                                         
@using ImageProcessing;
@inject IAnnotatedImagesServiceProvider databaseProvider;
@inject IImageDetailsProvider imageDetailsProvider;

<PageTitle>Test wczytywania plików</PageTitle>

<h1>Naciśnij, aby wczytać</h1>
<form>
  <fieldset>
    <div class="form-group">
      <label for="formFile" class="form-label mt-4">Default file input example</label>
      <input class="form-control" type="file" id="formFile">
    </div>
    </fieldset>
</form>
<button 
    class ="btn btn-primary"
    @onclick="@AddFilesToProjectAsync">

    Prześlij wybrane pliki do projektu
</button>
<br />
<br />

<InputFile OnChange="@LoadFilesAsync"
    multiple
    accept=".png,.jpg,.jpeg"/>
Wczytaj pliki
<br />
<InputFile OnChange="@LoadFilesAsync"
    multiple
    webkitdirectory/>
Wczytaj folder

@if (images is {})
{
    <table>
    @for (int i = 0; i < images.Count; i += 3)
    {
        <tr>
            @for (int j = 0; j < 3 && i + j < images.Count; j++)
            {
                var image = images[i + j];
                <td>                      
                    <img src=@image.SourceBase64
                         alt=@image.Name
                         title=@image.Name
                         style="width: 300px; height: auto"/>
                </td>
            }
        </tr>
    }
    </table>
}

@code{
    private List<ImageData> images = new();
    private readonly List<string> supportedContentTypes = new()
    {
        "image/png",
        "image/jpg",
        "image/jpeg"
    };

    [Parameter]
    public int JobId { get; set; }

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        var maxFiles = e.FileCount;
        var files = e.GetMultipleFiles(maxFiles)
            .Where(x => supportedContentTypes.Contains(x.ContentType));

        foreach (var file in files)
        {
            var filename = file.Name;
            var name = Path.GetFileNameWithoutExtension(filename);
            var extension = Path.GetExtension(filename);

            var base64 = await FileConverter.BrowserFileToBase64Async(file);
            var details = await imageDetailsProvider.GetImageDetails(file);

            var byteArray = await FileConverter.BrowserFileToByteArrayAsync(file);
            var ms = new MemoryStream(byteArray);
            var exif = ExifFromImageExtractor.ExifFromStream(ms);

            var image = new ImageData
            {
                Name = name,
                SourceBase64 = base64,
                Extension = extension,
                Width = details.Width,
                Height = details.Height,
                Exif = exif,
            };
            images.Add(image);
        }

        StateHasChanged();
    }

    private async Task AddFilesToProjectAsync()
    {
        var annotatedImages = images.Select(i =>
        {
            return new AnnotatedImage
                {
                    ImageData = i,
                };
        }).ToList();

        images.Clear();

        await databaseProvider.AddAnnotatedImagesAsync(annotatedImages, JobId);
    }
}
