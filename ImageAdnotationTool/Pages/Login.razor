@page "/login"
@using Blazored.FluentValidation
@using ImageAnnotationToolDataAccessLibrary.ModelCreationRequests;
@using ImageAnnotationToolDataAccessLibrary.Models.TeamManagement;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using ImageAnnotationToolDataAccessLibrary.Services;
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Components.Forms;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject IUserAccountsServiceProvider userAccountsService;
@inject NavigationManager NavigationManager;


<PageTitle>Logowanie</PageTitle>

<fieldset>
<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
  
	<h3>Zaloguj się</h3>
    <div class="form-group">
      <label for="exampleInputEmail1" class="form-label mt-4">Login</label>
       

	@*<FluentValidationValidator Validator="validator"/>*@
	<InputText 
		type="text"
			   class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Wprowadź login"
			  autocomplete="off" @bind-Value="@loginModel.Username" />
	 <ValidationMessage For="@(() => loginModel.Username)" />
	

	  
      </div>
    <div class="form-group">
      <label for="exampleInputPassword1" class="form-label mt-4">Hasło</label>
	 
	<InputText type="password"
			   class="form-control" id="exampleInputPassword1" placeholder="Hasło"
			    @bind-Value="@loginModel.Password"/>
	 <ValidationMessage For="@(() => loginModel.Password)" />

    </div>
    <div class="alert alert-danger" style="visibility: @(string.IsNullOrEmpty(loginModel.ErrorMessage) ? "hidden" : "visible")">
    @loginModel.ErrorMessage
</div>
	<button type="submit" class="btn btn-primary" >Zaloguj</button>
		</EditForm>

    </fieldset>
	<br/>
    
@code{
    private LogInFormData loginModel = new();
    private int? currentUserID;
    

    private async Task HandleLogin()
    {
        var isAuthenticated = await userAccountsService.UserWithLoginAndPasswordExists(loginModel.Username,loginModel.Password);

        if (isAuthenticated)
        {
            NavigationManager.NavigateTo("/teams");
            var currentUserID = await userAccountsService.GetUserAccountId(loginModel.Username);
            await ProtectedSessionStore.SetAsync("userID",currentUserID);
        }
        else
        {
            loginModel.ErrorMessage = "Nieprawidłowe hasło lub login.";
        }
    }


	
	
}
