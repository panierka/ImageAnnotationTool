@typeparam T

<div>
    <select @onchange=HandleSelectionChange>
        @foreach (var container in itemContainers)
        {
            <option value="@container.Id">@container.Item.ToString()</option>
        }
    </select>
</div>

@code {
    [Parameter]
    public T? SelectedItem 
    { 
        get => selectedItem; 
        set
        {
            selectedItem = value;
            OnSelectedItemChanged?.Invoke(SelectedItem);
        }
    }

    [Parameter, EditorRequired]
    public IEnumerable<T> Items { get; set; } = null!;

    private IEnumerable<ItemContainer> itemContainers = null!;

    [Parameter]
    public Action<T?>? OnSelectedItemChanged { get; set; }

    protected override void OnInitialized()
    {
        itemContainers = Items
        .Zip(
            Enumerable.Range(1, Items.Count()), 
            (x, i) => new ItemContainer(i.ToString(), x)
        );
    }

    private void HandleSelectionChange(ChangeEventArgs e)
    {
        if (e.Value is not string id)
        {
            return;
        }

        SelectedItem = itemContainers.First(x => x.Id == id).Item;
    }

    private T? selectedItem;

    private record ItemContainer(string Id, T Item);
}
